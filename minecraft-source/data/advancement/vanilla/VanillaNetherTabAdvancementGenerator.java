/*
 * External method calls:
 *   Lnet/minecraft/advancement/Advancement$Builder;create()Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/text/Text;translatable(Ljava/lang/String;)Lnet/minecraft/text/MutableText;
 *   Lnet/minecraft/util/Identifier;ofVanilla(Ljava/lang/String;)Lnet/minecraft/util/Identifier;
 *   Lnet/minecraft/advancement/Advancement$Builder;display(Lnet/minecraft/item/ItemConvertible;Lnet/minecraft/text/Text;Lnet/minecraft/text/Text;Lnet/minecraft/util/Identifier;Lnet/minecraft/advancement/AdvancementFrame;ZZZ)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/advancement/criterion/ChangedDimensionCriterion$Conditions;to(Lnet/minecraft/registry/RegistryKey;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/advancement/Advancement$Builder;criterion(Ljava/lang/String;Lnet/minecraft/advancement/AdvancementCriterion;)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/advancement/Advancement$Builder;build(Ljava/util/function/Consumer;Ljava/lang/String;)Lnet/minecraft/advancement/AdvancementEntry;
 *   Lnet/minecraft/advancement/Advancement$Builder;parent(Lnet/minecraft/advancement/AdvancementEntry;)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/advancement/AdvancementRewards$Builder;experience(I)Lnet/minecraft/advancement/AdvancementRewards$Builder;
 *   Lnet/minecraft/advancement/Advancement$Builder;rewards(Lnet/minecraft/advancement/AdvancementRewards$Builder;)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;create()Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;type(Lnet/minecraft/registry/RegistryEntryLookup;Lnet/minecraft/entity/EntityType;)Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;create()Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;
 *   Lnet/minecraft/predicate/TagPredicate;expected(Lnet/minecraft/registry/tag/TagKey;)Lnet/minecraft/predicate/TagPredicate;
 *   Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;tag(Lnet/minecraft/predicate/TagPredicate;)Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;
 *   Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;directEntity(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/OnKilledCriterion$Conditions;createPlayerKilledEntity(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;Lnet/minecraft/predicate/entity/DamageSourcePredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/LocationPredicate$Builder;createStructure(Lnet/minecraft/registry/entry/RegistryEntry;)Lnet/minecraft/predicate/entity/LocationPredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/TickCriterion$Conditions;createLocation(Lnet/minecraft/predicate/entity/LocationPredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/NumberRange$DoubleRange;atLeast(D)Lnet/minecraft/predicate/NumberRange$DoubleRange;
 *   Lnet/minecraft/predicate/entity/DistancePredicate;horizontal(Lnet/minecraft/predicate/NumberRange$DoubleRange;)Lnet/minecraft/predicate/entity/DistancePredicate;
 *   Lnet/minecraft/advancement/criterion/TravelCriterion$Conditions;netherTravel(Lnet/minecraft/predicate/entity/DistancePredicate;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/LocationPredicate$Builder;createDimension(Lnet/minecraft/registry/RegistryKey;)Lnet/minecraft/predicate/entity/LocationPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;location(Lnet/minecraft/predicate/entity/LocationPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/OnKilledCriterion$Conditions;createPlayerKilledEntity(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/advancement/criterion/InventoryChangedCriterion$Conditions;items([Lnet/minecraft/item/ItemConvertible;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/advancement/criterion/SummonedEntityCriterion$Conditions;create(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/NumberRange$IntRange;atLeast(I)Lnet/minecraft/predicate/NumberRange$IntRange;
 *   Lnet/minecraft/advancement/criterion/ConstructBeaconCriterion$Conditions;level(Lnet/minecraft/predicate/NumberRange$IntRange;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/NumberRange$IntRange;exactly(I)Lnet/minecraft/predicate/NumberRange$IntRange;
 *   Lnet/minecraft/advancement/criterion/BrewedPotionCriterion$Conditions;any()Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/EntityEffectPredicate$Builder;create()Lnet/minecraft/predicate/entity/EntityEffectPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityEffectPredicate$Builder;addEffect(Lnet/minecraft/registry/entry/RegistryEntry;)Lnet/minecraft/predicate/entity/EntityEffectPredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/EffectsChangedCriterion$Conditions;create(Lnet/minecraft/predicate/entity/EntityEffectPredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/LocationPredicate$Builder;create()Lnet/minecraft/predicate/entity/LocationPredicate$Builder;
 *   Lnet/minecraft/predicate/BlockPredicate$Builder;create()Lnet/minecraft/predicate/BlockPredicate$Builder;
 *   Lnet/minecraft/predicate/BlockPredicate$Builder;blocks(Lnet/minecraft/registry/RegistryEntryLookup;[Lnet/minecraft/block/Block;)Lnet/minecraft/predicate/BlockPredicate$Builder;
 *   Lnet/minecraft/predicate/StatePredicate$Builder;create()Lnet/minecraft/predicate/StatePredicate$Builder;
 *   Lnet/minecraft/predicate/StatePredicate$Builder;exactMatch(Lnet/minecraft/state/property/Property;I)Lnet/minecraft/predicate/StatePredicate$Builder;
 *   Lnet/minecraft/predicate/BlockPredicate$Builder;state(Lnet/minecraft/predicate/StatePredicate$Builder;)Lnet/minecraft/predicate/BlockPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/LocationPredicate$Builder;block(Lnet/minecraft/predicate/BlockPredicate$Builder;)Lnet/minecraft/predicate/entity/LocationPredicate$Builder;
 *   Lnet/minecraft/predicate/item/ItemPredicate$Builder;create()Lnet/minecraft/predicate/item/ItemPredicate$Builder;
 *   Lnet/minecraft/predicate/item/ItemPredicate$Builder;items(Lnet/minecraft/registry/RegistryEntryLookup;[Lnet/minecraft/item/ItemConvertible;)Lnet/minecraft/predicate/item/ItemPredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/ItemCriterion$Conditions;createItemUsedOnBlock(Lnet/minecraft/predicate/entity/LocationPredicate$Builder;Lnet/minecraft/predicate/item/ItemPredicate$Builder;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;vehicle(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate;contextPredicateFromEntityPredicate(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/predicate/entity/LootContextPredicate;
 *   Lnet/minecraft/predicate/item/ItemPredicate$Builder;build()Lnet/minecraft/predicate/item/ItemPredicate;
 *   Lnet/minecraft/advancement/criterion/ItemDurabilityChangedCriterion$Conditions;create(Ljava/util/Optional;Ljava/util/Optional;Lnet/minecraft/predicate/NumberRange$IntRange;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/advancement/criterion/TravelCriterion$Conditions;rideEntityInLava(Lnet/minecraft/predicate/entity/EntityPredicate$Builder;Lnet/minecraft/predicate/entity/DistancePredicate;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/world/biome/source/MultiNoiseBiomeSourceParameterList$Preset;biomeStream()Ljava/util/stream/Stream;
 *   Lnet/minecraft/data/advancement/vanilla/VanillaAdventureTabAdvancementGenerator;requireListedBiomesVisited(Lnet/minecraft/advancement/Advancement$Builder;Lnet/minecraft/registry/RegistryWrapper$WrapperLookup;Ljava/util/List;)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/advancement/Advancement$Builder;criteriaMerger(Lnet/minecraft/advancement/AdvancementRequirements$CriterionMerger;)Lnet/minecraft/advancement/Advancement$Builder;
 *   Lnet/minecraft/advancement/criterion/PlayerGeneratesContainerLootCriterion$Conditions;create(Lnet/minecraft/registry/RegistryKey;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;create()Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;
 *   Lnet/minecraft/predicate/item/ItemPredicate$Builder;tag(Lnet/minecraft/registry/RegistryEntryLookup;Lnet/minecraft/registry/tag/TagKey;)Lnet/minecraft/predicate/item/ItemPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;head(Lnet/minecraft/predicate/item/ItemPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;equipment(Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/loot/condition/EntityPropertiesLootCondition;builder(Lnet/minecraft/loot/context/LootContext$EntityReference;Lnet/minecraft/predicate/entity/EntityPredicate$Builder;)Lnet/minecraft/loot/condition/LootCondition$Builder;
 *   Lnet/minecraft/loot/condition/LootCondition$Builder;invert()Lnet/minecraft/loot/condition/LootCondition$Builder;
 *   Lnet/minecraft/loot/condition/LootCondition$Builder;build()Lnet/minecraft/loot/condition/LootCondition;
 *   Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;chest(Lnet/minecraft/predicate/item/ItemPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;legs(Lnet/minecraft/predicate/item/ItemPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;feet(Lnet/minecraft/predicate/item/ItemPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityEquipmentPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/LootContextPredicate;create([Lnet/minecraft/loot/condition/LootCondition;)Lnet/minecraft/predicate/entity/LootContextPredicate;
 *   Lnet/minecraft/predicate/entity/EntityFlagsPredicate$Builder;create()Lnet/minecraft/predicate/entity/EntityFlagsPredicate$Builder;
 *   Lnet/minecraft/predicate/entity/EntityPredicate$Builder;flags(Lnet/minecraft/predicate/entity/EntityFlagsPredicate$Builder;)Lnet/minecraft/predicate/entity/EntityPredicate$Builder;
 *   Lnet/minecraft/advancement/criterion/ThrownItemPickedUpByEntityCriterion$Conditions;createThrownItemPickedUpByEntity(Lnet/minecraft/predicate/entity/LootContextPredicate;Ljava/util/Optional;Ljava/util/Optional;)Lnet/minecraft/advancement/AdvancementCriterion;
 *   Lnet/minecraft/advancement/criterion/PlayerInteractedWithEntityCriterion$Conditions;create(Ljava/util/Optional;Lnet/minecraft/predicate/item/ItemPredicate$Builder;Ljava/util/Optional;)Lnet/minecraft/advancement/AdvancementCriterion;
 */
package net.minecraft.data.advancement.vanilla;

import java.util.Optional;
import java.util.function.Consumer;
import net.minecraft.advancement.Advancement;
import net.minecraft.advancement.AdvancementEntry;
import net.minecraft.advancement.AdvancementFrame;
import net.minecraft.advancement.AdvancementRequirements;
import net.minecraft.advancement.AdvancementRewards;
import net.minecraft.advancement.criterion.BrewedPotionCriterion;
import net.minecraft.advancement.criterion.ChangedDimensionCriterion;
import net.minecraft.advancement.criterion.ConstructBeaconCriterion;
import net.minecraft.advancement.criterion.EffectsChangedCriterion;
import net.minecraft.advancement.criterion.InventoryChangedCriterion;
import net.minecraft.advancement.criterion.ItemCriterion;
import net.minecraft.advancement.criterion.ItemDurabilityChangedCriterion;
import net.minecraft.advancement.criterion.OnKilledCriterion;
import net.minecraft.advancement.criterion.PlayerGeneratesContainerLootCriterion;
import net.minecraft.advancement.criterion.PlayerInteractedWithEntityCriterion;
import net.minecraft.advancement.criterion.SummonedEntityCriterion;
import net.minecraft.advancement.criterion.ThrownItemPickedUpByEntityCriterion;
import net.minecraft.advancement.criterion.TickCriterion;
import net.minecraft.advancement.criterion.TravelCriterion;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.RespawnAnchorBlock;
import net.minecraft.data.advancement.AdvancementTabGenerator;
import net.minecraft.data.advancement.vanilla.VanillaAdventureTabAdvancementGenerator;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.entity.mob.PiglinBrain;
import net.minecraft.item.Items;
import net.minecraft.loot.LootTables;
import net.minecraft.loot.condition.EntityPropertiesLootCondition;
import net.minecraft.loot.context.LootContext;
import net.minecraft.predicate.BlockPredicate;
import net.minecraft.predicate.NumberRange;
import net.minecraft.predicate.StatePredicate;
import net.minecraft.predicate.TagPredicate;
import net.minecraft.predicate.entity.DamageSourcePredicate;
import net.minecraft.predicate.entity.DistancePredicate;
import net.minecraft.predicate.entity.EntityEffectPredicate;
import net.minecraft.predicate.entity.EntityEquipmentPredicate;
import net.minecraft.predicate.entity.EntityFlagsPredicate;
import net.minecraft.predicate.entity.EntityPredicate;
import net.minecraft.predicate.entity.LocationPredicate;
import net.minecraft.predicate.entity.LootContextPredicate;
import net.minecraft.predicate.item.ItemPredicate;
import net.minecraft.registry.RegistryEntryLookup;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.RegistryWrapper;
import net.minecraft.registry.tag.DamageTypeTags;
import net.minecraft.registry.tag.ItemTags;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;
import net.minecraft.world.World;
import net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterList;
import net.minecraft.world.gen.structure.StructureKeys;

public class VanillaNetherTabAdvancementGenerator
implements AdvancementTabGenerator {
    @Override
    public void accept(RegistryWrapper.WrapperLookup registries, Consumer<AdvancementEntry> exporter) {
        RegistryEntryLookup lv = registries.getOrThrow(RegistryKeys.ENTITY_TYPE);
        RegistryEntryLookup lv2 = registries.getOrThrow(RegistryKeys.ITEM);
        RegistryEntryLookup lv3 = registries.getOrThrow(RegistryKeys.BLOCK);
        AdvancementEntry lv4 = Advancement.Builder.create().display(Blocks.RED_NETHER_BRICKS, (Text)Text.translatable("advancements.nether.root.title"), (Text)Text.translatable("advancements.nether.root.description"), Identifier.ofVanilla("gui/advancements/backgrounds/nether"), AdvancementFrame.TASK, false, false, false).criterion("entered_nether", ChangedDimensionCriterion.Conditions.to(World.NETHER)).build(exporter, "nether/root");
        AdvancementEntry lv5 = Advancement.Builder.create().parent(lv4).display(Items.FIRE_CHARGE, (Text)Text.translatable("advancements.nether.return_to_sender.title"), (Text)Text.translatable("advancements.nether.return_to_sender.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(50)).criterion("killed_ghast", OnKilledCriterion.Conditions.createPlayerKilledEntity(EntityPredicate.Builder.create().type(lv, EntityType.GHAST), DamageSourcePredicate.Builder.create().tag(TagPredicate.expected(DamageTypeTags.IS_PROJECTILE)).directEntity(EntityPredicate.Builder.create().type(lv, EntityType.FIREBALL)))).build(exporter, "nether/return_to_sender");
        AdvancementEntry lv6 = Advancement.Builder.create().parent(lv4).display(Blocks.NETHER_BRICKS, (Text)Text.translatable("advancements.nether.find_fortress.title"), (Text)Text.translatable("advancements.nether.find_fortress.description"), null, AdvancementFrame.TASK, true, true, false).criterion("fortress", TickCriterion.Conditions.createLocation(LocationPredicate.Builder.createStructure(registries.getOrThrow(RegistryKeys.STRUCTURE).getOrThrow(StructureKeys.FORTRESS)))).build(exporter, "nether/find_fortress");
        Advancement.Builder.create().parent(lv4).display(Items.MAP, (Text)Text.translatable("advancements.nether.fast_travel.title"), (Text)Text.translatable("advancements.nether.fast_travel.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).criterion("travelled", TravelCriterion.Conditions.netherTravel(DistancePredicate.horizontal(NumberRange.DoubleRange.atLeast(7000.0)))).build(exporter, "nether/fast_travel");
        Advancement.Builder.create().parent(lv5).display(Items.GHAST_TEAR, (Text)Text.translatable("advancements.nether.uneasy_alliance.title"), (Text)Text.translatable("advancements.nether.uneasy_alliance.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).criterion("killed_ghast", OnKilledCriterion.Conditions.createPlayerKilledEntity(EntityPredicate.Builder.create().type(lv, EntityType.GHAST).location(LocationPredicate.Builder.createDimension(World.OVERWORLD)))).build(exporter, "nether/uneasy_alliance");
        AdvancementEntry lv7 = Advancement.Builder.create().parent(lv6).display(Blocks.WITHER_SKELETON_SKULL, (Text)Text.translatable("advancements.nether.get_wither_skull.title"), (Text)Text.translatable("advancements.nether.get_wither_skull.description"), null, AdvancementFrame.TASK, true, true, false).criterion("wither_skull", InventoryChangedCriterion.Conditions.items(Blocks.WITHER_SKELETON_SKULL)).build(exporter, "nether/get_wither_skull");
        AdvancementEntry lv8 = Advancement.Builder.create().parent(lv7).display(Items.NETHER_STAR, (Text)Text.translatable("advancements.nether.summon_wither.title"), (Text)Text.translatable("advancements.nether.summon_wither.description"), null, AdvancementFrame.TASK, true, true, false).criterion("summoned", SummonedEntityCriterion.Conditions.create(EntityPredicate.Builder.create().type(lv, EntityType.WITHER))).build(exporter, "nether/summon_wither");
        AdvancementEntry lv9 = Advancement.Builder.create().parent(lv6).display(Items.BLAZE_ROD, (Text)Text.translatable("advancements.nether.obtain_blaze_rod.title"), (Text)Text.translatable("advancements.nether.obtain_blaze_rod.description"), null, AdvancementFrame.TASK, true, true, false).criterion("blaze_rod", InventoryChangedCriterion.Conditions.items(Items.BLAZE_ROD)).build(exporter, "nether/obtain_blaze_rod");
        AdvancementEntry lv10 = Advancement.Builder.create().parent(lv8).display(Blocks.BEACON, (Text)Text.translatable("advancements.nether.create_beacon.title"), (Text)Text.translatable("advancements.nether.create_beacon.description"), null, AdvancementFrame.TASK, true, true, false).criterion("beacon", ConstructBeaconCriterion.Conditions.level(NumberRange.IntRange.atLeast(1))).build(exporter, "nether/create_beacon");
        Advancement.Builder.create().parent(lv10).display(Blocks.BEACON, (Text)Text.translatable("advancements.nether.create_full_beacon.title"), (Text)Text.translatable("advancements.nether.create_full_beacon.description"), null, AdvancementFrame.GOAL, true, true, false).criterion("beacon", ConstructBeaconCriterion.Conditions.level(NumberRange.IntRange.exactly(4))).build(exporter, "nether/create_full_beacon");
        AdvancementEntry lv11 = Advancement.Builder.create().parent(lv9).display(Items.POTION, (Text)Text.translatable("advancements.nether.brew_potion.title"), (Text)Text.translatable("advancements.nether.brew_potion.description"), null, AdvancementFrame.TASK, true, true, false).criterion("potion", BrewedPotionCriterion.Conditions.any()).build(exporter, "nether/brew_potion");
        AdvancementEntry lv12 = Advancement.Builder.create().parent(lv11).display(Items.MILK_BUCKET, (Text)Text.translatable("advancements.nether.all_potions.title"), (Text)Text.translatable("advancements.nether.all_potions.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).criterion("all_effects", EffectsChangedCriterion.Conditions.create(EntityEffectPredicate.Builder.create().addEffect(StatusEffects.SPEED).addEffect(StatusEffects.SLOWNESS).addEffect(StatusEffects.STRENGTH).addEffect(StatusEffects.JUMP_BOOST).addEffect(StatusEffects.REGENERATION).addEffect(StatusEffects.FIRE_RESISTANCE).addEffect(StatusEffects.WATER_BREATHING).addEffect(StatusEffects.INVISIBILITY).addEffect(StatusEffects.NIGHT_VISION).addEffect(StatusEffects.WEAKNESS).addEffect(StatusEffects.POISON).addEffect(StatusEffects.SLOW_FALLING).addEffect(StatusEffects.RESISTANCE).addEffect(StatusEffects.OOZING).addEffect(StatusEffects.INFESTED).addEffect(StatusEffects.WIND_CHARGED).addEffect(StatusEffects.WEAVING))).build(exporter, "nether/all_potions");
        Advancement.Builder.create().parent(lv12).display(Items.BUCKET, (Text)Text.translatable("advancements.nether.all_effects.title"), (Text)Text.translatable("advancements.nether.all_effects.description"), null, AdvancementFrame.CHALLENGE, true, true, true).rewards(AdvancementRewards.Builder.experience(1000)).criterion("all_effects", EffectsChangedCriterion.Conditions.create(EntityEffectPredicate.Builder.create().addEffect(StatusEffects.SPEED).addEffect(StatusEffects.SLOWNESS).addEffect(StatusEffects.STRENGTH).addEffect(StatusEffects.JUMP_BOOST).addEffect(StatusEffects.REGENERATION).addEffect(StatusEffects.FIRE_RESISTANCE).addEffect(StatusEffects.WATER_BREATHING).addEffect(StatusEffects.INVISIBILITY).addEffect(StatusEffects.NIGHT_VISION).addEffect(StatusEffects.WEAKNESS).addEffect(StatusEffects.POISON).addEffect(StatusEffects.WITHER).addEffect(StatusEffects.HASTE).addEffect(StatusEffects.MINING_FATIGUE).addEffect(StatusEffects.LEVITATION).addEffect(StatusEffects.GLOWING).addEffect(StatusEffects.ABSORPTION).addEffect(StatusEffects.HUNGER).addEffect(StatusEffects.NAUSEA).addEffect(StatusEffects.RESISTANCE).addEffect(StatusEffects.SLOW_FALLING).addEffect(StatusEffects.CONDUIT_POWER).addEffect(StatusEffects.DOLPHINS_GRACE).addEffect(StatusEffects.BLINDNESS).addEffect(StatusEffects.BAD_OMEN).addEffect(StatusEffects.HERO_OF_THE_VILLAGE).addEffect(StatusEffects.DARKNESS).addEffect(StatusEffects.OOZING).addEffect(StatusEffects.INFESTED).addEffect(StatusEffects.WIND_CHARGED).addEffect(StatusEffects.WEAVING).addEffect(StatusEffects.TRIAL_OMEN).addEffect(StatusEffects.RAID_OMEN))).build(exporter, "nether/all_effects");
        AdvancementEntry lv13 = Advancement.Builder.create().parent(lv4).display(Items.ANCIENT_DEBRIS, (Text)Text.translatable("advancements.nether.obtain_ancient_debris.title"), (Text)Text.translatable("advancements.nether.obtain_ancient_debris.description"), null, AdvancementFrame.TASK, true, true, false).criterion("ancient_debris", InventoryChangedCriterion.Conditions.items(Items.ANCIENT_DEBRIS)).build(exporter, "nether/obtain_ancient_debris");
        Advancement.Builder.create().parent(lv13).display(Items.NETHERITE_CHESTPLATE, (Text)Text.translatable("advancements.nether.netherite_armor.title"), (Text)Text.translatable("advancements.nether.netherite_armor.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).criterion("netherite_armor", InventoryChangedCriterion.Conditions.items(Items.NETHERITE_HELMET, Items.NETHERITE_CHESTPLATE, Items.NETHERITE_LEGGINGS, Items.NETHERITE_BOOTS)).build(exporter, "nether/netherite_armor");
        AdvancementEntry lv14 = Advancement.Builder.create().parent(lv4).display(Items.CRYING_OBSIDIAN, (Text)Text.translatable("advancements.nether.obtain_crying_obsidian.title"), (Text)Text.translatable("advancements.nether.obtain_crying_obsidian.description"), null, AdvancementFrame.TASK, true, true, false).criterion("crying_obsidian", InventoryChangedCriterion.Conditions.items(Items.CRYING_OBSIDIAN)).build(exporter, "nether/obtain_crying_obsidian");
        Advancement.Builder.create().parent(lv14).display(Items.RESPAWN_ANCHOR, (Text)Text.translatable("advancements.nether.charge_respawn_anchor.title"), (Text)Text.translatable("advancements.nether.charge_respawn_anchor.description"), null, AdvancementFrame.TASK, true, true, false).criterion("charge_respawn_anchor", ItemCriterion.Conditions.createItemUsedOnBlock(LocationPredicate.Builder.create().block(BlockPredicate.Builder.create().blocks((RegistryEntryLookup<Block>)lv3, Blocks.RESPAWN_ANCHOR).state(StatePredicate.Builder.create().exactMatch(RespawnAnchorBlock.CHARGES, 4))), ItemPredicate.Builder.create().items(lv2, Blocks.GLOWSTONE))).build(exporter, "nether/charge_respawn_anchor");
        AdvancementEntry lv15 = Advancement.Builder.create().parent(lv4).display(Items.WARPED_FUNGUS_ON_A_STICK, (Text)Text.translatable("advancements.nether.ride_strider.title"), (Text)Text.translatable("advancements.nether.ride_strider.description"), null, AdvancementFrame.TASK, true, true, false).criterion("used_warped_fungus_on_a_stick", ItemDurabilityChangedCriterion.Conditions.create(Optional.of(EntityPredicate.contextPredicateFromEntityPredicate(EntityPredicate.Builder.create().vehicle(EntityPredicate.Builder.create().type(lv, EntityType.STRIDER)))), Optional.of(ItemPredicate.Builder.create().items(lv2, Items.WARPED_FUNGUS_ON_A_STICK).build()), NumberRange.IntRange.ANY)).build(exporter, "nether/ride_strider");
        Advancement.Builder.create().parent(lv15).display(Items.WARPED_FUNGUS_ON_A_STICK, (Text)Text.translatable("advancements.nether.ride_strider_in_overworld_lava.title"), (Text)Text.translatable("advancements.nether.ride_strider_in_overworld_lava.description"), null, AdvancementFrame.TASK, true, true, false).criterion("ride_entity_distance", TravelCriterion.Conditions.rideEntityInLava(EntityPredicate.Builder.create().location(LocationPredicate.Builder.createDimension(World.OVERWORLD)).vehicle(EntityPredicate.Builder.create().type(lv, EntityType.STRIDER)), DistancePredicate.horizontal(NumberRange.DoubleRange.atLeast(50.0)))).build(exporter, "nether/ride_strider_in_overworld_lava");
        VanillaAdventureTabAdvancementGenerator.requireListedBiomesVisited(Advancement.Builder.create(), registries, MultiNoiseBiomeSourceParameterList.Preset.NETHER.biomeStream().toList()).parent(lv15).display(Items.NETHERITE_BOOTS, (Text)Text.translatable("advancements.nether.explore_nether.title"), (Text)Text.translatable("advancements.nether.explore_nether.description"), null, AdvancementFrame.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(500)).build(exporter, "nether/explore_nether");
        AdvancementEntry lv16 = Advancement.Builder.create().parent(lv4).display(Items.POLISHED_BLACKSTONE_BRICKS, (Text)Text.translatable("advancements.nether.find_bastion.title"), (Text)Text.translatable("advancements.nether.find_bastion.description"), null, AdvancementFrame.TASK, true, true, false).criterion("bastion", TickCriterion.Conditions.createLocation(LocationPredicate.Builder.createStructure(registries.getOrThrow(RegistryKeys.STRUCTURE).getOrThrow(StructureKeys.BASTION_REMNANT)))).build(exporter, "nether/find_bastion");
        Advancement.Builder.create().parent(lv16).display(Blocks.CHEST, (Text)Text.translatable("advancements.nether.loot_bastion.title"), (Text)Text.translatable("advancements.nether.loot_bastion.description"), null, AdvancementFrame.TASK, true, true, false).criteriaMerger(AdvancementRequirements.CriterionMerger.OR).criterion("loot_bastion_other", PlayerGeneratesContainerLootCriterion.Conditions.create(LootTables.BASTION_OTHER_CHEST)).criterion("loot_bastion_treasure", PlayerGeneratesContainerLootCriterion.Conditions.create(LootTables.BASTION_TREASURE_CHEST)).criterion("loot_bastion_hoglin_stable", PlayerGeneratesContainerLootCriterion.Conditions.create(LootTables.BASTION_HOGLIN_STABLE_CHEST)).criterion("loot_bastion_bridge", PlayerGeneratesContainerLootCriterion.Conditions.create(LootTables.BASTION_BRIDGE_CHEST)).build(exporter, "nether/loot_bastion");
        LootContextPredicate lv17 = LootContextPredicate.create(EntityPropertiesLootCondition.builder(LootContext.EntityReference.THIS, EntityPredicate.Builder.create().equipment(EntityEquipmentPredicate.Builder.create().head(ItemPredicate.Builder.create().tag(lv2, ItemTags.PIGLIN_SAFE_ARMOR)))).invert().build(), EntityPropertiesLootCondition.builder(LootContext.EntityReference.THIS, EntityPredicate.Builder.create().equipment(EntityEquipmentPredicate.Builder.create().chest(ItemPredicate.Builder.create().tag(lv2, ItemTags.PIGLIN_SAFE_ARMOR)))).invert().build(), EntityPropertiesLootCondition.builder(LootContext.EntityReference.THIS, EntityPredicate.Builder.create().equipment(EntityEquipmentPredicate.Builder.create().legs(ItemPredicate.Builder.create().tag(lv2, ItemTags.PIGLIN_SAFE_ARMOR)))).invert().build(), EntityPropertiesLootCondition.builder(LootContext.EntityReference.THIS, EntityPredicate.Builder.create().equipment(EntityEquipmentPredicate.Builder.create().feet(ItemPredicate.Builder.create().tag(lv2, ItemTags.PIGLIN_SAFE_ARMOR)))).invert().build());
        Advancement.Builder.create().parent(lv4).criteriaMerger(AdvancementRequirements.CriterionMerger.OR).display(Items.GOLD_INGOT, (Text)Text.translatable("advancements.nether.distract_piglin.title"), (Text)Text.translatable("advancements.nether.distract_piglin.description"), null, AdvancementFrame.TASK, true, true, false).criterion("distract_piglin", ThrownItemPickedUpByEntityCriterion.Conditions.createThrownItemPickedUpByEntity(lv17, Optional.of(ItemPredicate.Builder.create().tag(lv2, ItemTags.PIGLIN_LOVED).build()), Optional.of(EntityPredicate.contextPredicateFromEntityPredicate(EntityPredicate.Builder.create().type(lv, EntityType.PIGLIN).flags(EntityFlagsPredicate.Builder.create().isBaby(false)))))).criterion("distract_piglin_directly", PlayerInteractedWithEntityCriterion.Conditions.create(Optional.of(lv17), ItemPredicate.Builder.create().items(lv2, PiglinBrain.BARTERING_ITEM), Optional.of(EntityPredicate.contextPredicateFromEntityPredicate(EntityPredicate.Builder.create().type(lv, EntityType.PIGLIN).flags(EntityFlagsPredicate.Builder.create().isBaby(false)))))).build(exporter, "nether/distract_piglin");
    }
}

